{
	// Place your front workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }


	"Language snippet": {
		"prefix": "locs snippet",
		"body": [
			"//Language locale",
			"const lang = locale(HandlerValues.lang);",
			"const routes = lang.routes;",
			"const loc = lang.$1;"
		],
		"description": "Get language-object from locale."
	},

	"Context snippet": {
		"prefix": "context snippet",
		"body": [
			"/*** Context ***/",
			"const context = useContext(AppContext);",
			"const {state, actions} = context || {};",
			"const {$1} = state || {};",
			"const {} = actions || {};",
		],
		"description": "Define and destructure context."
	},

	"UseEffect snippet": {
		"prefix": "useEffect Snippet",
		"body": [
			"//Runs when ",
			"// -",
			"useEffect(() => {",
			"",
			"}, [$1]);",
		],
		"description": "Sets up an useEffect-snippet"
	},

	"Eslint disable next line -snippet": {
		"prefix": "disable snippet comment",
		"body": [
			"//eslint-disable-next-line",
		],
		"description": "Inserts ignore-line for es-lint"
	}	
}
